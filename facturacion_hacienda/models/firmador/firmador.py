#!/usr/bin/python3
import sys
import chilkat2
import time
time1 = time.time()


#parametros
#/tmp/tmp4bQFsk.p12 1234 /tmp/tmpHkrJ47.xml /tmp/tmpHkrJ47.xml_firmado

glob = chilkat2.Global()
#KEY_CHILKAT = "PRCWLL.CB1012020_HJ4nYdcR59mg"
#KEY_CHILKAT = "AKHVAT.CB4112019_nu3k6EN2no4h"
#KEY_CHILKAT = "NFRLGC.CB1112020_vZdFLucd1RAZ"
#KEY_CHILKAT = "TNYNSC.CB1012020_EmzcqmDxk26p"
#KEY_CHILKAT = "NFRLGC.CB1112020_vZdFLucd1RAZ"
#KEY_CHILKAT = "AKHVAT.CB4112019_nu3k6EN2no4h"
key = "SEWRDN.CB1112022_ivwYuypT8625"
success = glob.UnlockBundle(key)

cert = chilkat2.Cert()
success = cert.LoadPfxFile(sys.argv[1], sys.argv[2])
if (success != True):
    print(cert.LastErrorText)
    sys.exit()

# Load XML to be signed.
sbXml = chilkat2.StringBuilder()
xml = chilkat2.Xml()
success = sbXml.LoadFile(sys.argv[3], "utf-8")
xml.LoadXmlFile(sys.argv[3])
if (success != True):
    print("Failed to load file.")
    sys.exit()

gen = chilkat2.XmlDSigGen()

# Indicate where the signature is to be placed.
gen.SigLocation = xml.GetRoot().Tag
#gen.SigLocation = "TiqueteElectronico"
gen.SigId = "Signature-d1cbfe99-fd8e-4e0f-b0b7-fc5bfe2f1dd0"
gen.SigNamespacePrefix = "ds"
gen.SignedInfoCanonAlg = "C14N"
gen.SignedInfoDigestMethod = "sha256"


# This is the code generated by the online tool to create the above XML.
# Note: Chilkat will automatically populate the strings indicated by "TO BE GENERATED BY CHILKAT" with actual/correct values
# when the XML is signed.
xml = chilkat2.Xml()
xml.Tag = "xades:QualifyingProperties"
xml.AddAttribute("xmlns:xades","http://uri.etsi.org/01903/v1.3.2#")
xml.AddAttribute("Id","QualifyingProperties-aa262416-8607-4f02-8897-0a6440a1ae03")
xml.AddAttribute("Target","#Signature-d1cbfe99-fd8e-4e0f-b0b7-fc5bfe2f1dd0")
xml.UpdateAttrAt("xades:SignedProperties",True,"Id","SignedProperties-Signature-d1cbfe99-fd8e-4e0f-b0b7-fc5bfe2f1dd0")
xml.UpdateChildContent("xades:SignedProperties|xades:SignedSignatureProperties|xades:SigningTime","TO BE GENERATED BY CHILKAT")
xml.UpdateAttrAt("xades:SignedProperties|xades:SignedSignatureProperties|xades:SigningCertificate|xades:Cert|xades:CertDigest|ds:DigestMethod",True,"Algorithm","http://www.w3.org/2001/04/xmlenc#sha256")
xml.UpdateChildContent("xades:SignedProperties|xades:SignedSignatureProperties|xades:SigningCertificate|xades:Cert|xades:CertDigest|ds:DigestValue","TO BE GENERATED BY CHILKAT")
xml.UpdateChildContent("xades:SignedProperties|xades:SignedSignatureProperties|xades:SigningCertificate|xades:Cert|xades:IssuerSerial|ds:X509IssuerName","TO BE GENERATED BY CHILKAT")
xml.UpdateChildContent("xades:SignedProperties|xades:SignedSignatureProperties|xades:SigningCertificate|xades:Cert|xades:IssuerSerial|ds:X509SerialNumber","TO BE GENERATED BY CHILKAT")
xml.UpdateChildContent("xades:SignedProperties|xades:SignedSignatureProperties|xades:SignaturePolicyIdentifier|xades:SignaturePolicyId|xades:SigPolicyId|xades:Identifier","https://www.hacienda.go.cr/ATV/ComprobanteElectronico/docs/esquemas/2016/v4.3/Resoluci%C3%B3n_General_sobre_disposiciones_t%C3%A9cnicas_comprobantes_electr%C3%B3nicos_para_efectos_tributarios.pdf")
xml.UpdateChildContent("xades:SignedProperties|xades:SignedSignatureProperties|xades:SignaturePolicyIdentifier|xades:SignaturePolicyId|xades:SigPolicyId|xades:Description","")
xml.UpdateAttrAt("xades:SignedProperties|xades:SignedSignatureProperties|xades:SignaturePolicyIdentifier|xades:SignaturePolicyId|xades:SigPolicyHash|ds:DigestMethod",True,"Algorithm","http://www.w3.org/2001/04/xmlenc#sha256")
xml.UpdateChildContent("xades:SignedProperties|xades:SignedSignatureProperties|xades:SignaturePolicyIdentifier|xades:SignaturePolicyId|xades:SigPolicyHash|ds:DigestValue","NmI5Njk1ZThkNzI0MmIzMGJmZDAyNDc4YjUwNzkzODM2NTBiOWUxNTBkMmI2YjgzYzZjM2I5NTZlNDQ4OWQzMQ==")
xml.UpdateAttrAt("xades:SignedProperties|xades:SignedDataObjectProperties|xades:DataObjectFormat",True,"ObjectReference","#Reference-ab26afbd-e2dc-4cb0-886a-ce2a4a118c7f")
xml.UpdateChildContent("xades:SignedProperties|xades:SignedDataObjectProperties|xades:DataObjectFormat|xades:MimeType","text/xml")
xml.UpdateChildContent("xades:SignedProperties|xades:SignedDataObjectProperties|xades:DataObjectFormat|xades:Encoding","UTF-8")

# --------------------------------------------------------------------
# Add the QualifyingProperties as an Object in the Signature that is to be produced.

gen.AddObject("XadesObjectId-674a431e-692c-4e0a-9d82-6275c85c5876", xml.GetXml(), "", "")

# Add a Reference to the SignedProperties.
signedPropsId = "SignedProperties-Signature-d1cbfe99-fd8e-4e0f-b0b7-fc5bfe2f1dd0"
gen.AddObjectRef(signedPropsId, "sha256", "EXCL_C14N", "", "http://uri.etsi.org/01903#SignedProperties")

# When the Signature is generated, the Reference to the SignedProperties will look like this:

#          <ds:Reference Type="http://uri.etsi.org/01903#SignedProperties" URI="#SignedProperties-Signature-d1cbfe99-fd8e-4e0f-b0b7-fc5bfe2f1dd0">
#             <ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" />
#             <ds:DigestValue>GLOA1AWNZhJM9NlK515TJmCE+/EKHlrIQJkkyTPPL4E=</ds:DigestValue>
#          </ds:Reference>

# --------------------------------------------------------------------
# Add a reference to the KeyInfo, which does not yet exist because it will be
# generated as part of the Signature.  However, we can specify the KeyInfo Id,
# and then specify that during signature generation, a reference to the KeyInfo (using the Id)
# should be added.

# We'll want a KeyInfo that will look like this:

#          <ds:Reference Id="ReferenceKeyInfo" URI="#KeyInfoId-Signature-d1cbfe99-fd8e-4e0f-b0b7-fc5bfe2f1dd0">
#             <ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" />
#             <ds:DigestValue>hbYK/DyNGpK4HtUQV8xsljxbrTJY4AS0SYOa1oW/FQw=</ds:DigestValue>
#          </ds:Reference>

keyInfoId = "KeyInfoId-Signature-d1cbfe99-fd8e-4e0f-b0b7-fc5bfe2f1dd0"
gen.KeyInfoId = keyInfoId
gen.AddSameDocRef(keyInfoId, "sha256", "EXCL_C14N", "", "")
gen.SetRefIdAttr(keyInfoId, "ReferenceKeyInfo")

# --------------------------------------------------------------------
# Add our 3rd and final Reference, which is to the root element of the XML document being signed.

gen.AddSameDocRef("", "sha256", "EXCL_C14N", "", "")
gen.SetRefIdAttr("", "Reference-ab26afbd-e2dc-4cb0-886a-ce2a4a118c7f")

# The 3rd Reference will look like this:

#          <ds:Reference Id="Reference-ab26afbd-e2dc-4cb0-886a-ce2a4a118c7f" URI="">
#             <ds:Transforms>
#                <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" />
#             </ds:Transforms>
#             <ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" />
#             <ds:DigestValue>BvbWtgU5sBzQpS4xHOocHHmj97o/M895BsYb0ce+3LA=</ds:DigestValue>
#          </ds:Reference>

# ----------------------------------------------------------------
# Provide the KeyInfo information.
gen.KeyInfoType = "X509Data"
gen.X509Type = "Certificate"
success = gen.SetX509Cert(cert,True)
if (not success):
    print(gen.LastErrorText)
    sys.exit()

# --------------------------------------------------------------------
# Create the XAdES-EPES signed XML.
gen.Behaviors = "IndentedSignature"

success = gen.CreateXmlDSigSb(sbXml)
if (not success):
    print(gen.LastErrorText)
    sys.exit()

# Examine the signed XML
sbXml.WriteFile(sys.argv[3] + "_firmado", "utf-8", False)

time2 = time.time()
print('function took %0.3f ms' % ((time2 - time1) * 1000.0) )

